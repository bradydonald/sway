# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4 foldmethod=marker
# ----------------------------------------------------------------------


# Defaults from: /etc/sway/config
# Got modified by DeaDSouL
# 60-bindings-sway.conf # {{{
#

bindsym {
    # Reload the configuration file
    $mod+Shift+c reload

    # Lock screen
    $mod+Ctrl+l exec swaylock -F

    # Exit sway (logs you out of your Wayland session)
    $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
}
# }}}
# 60-bindings-basics.conf # {{{
#

bindsym {
    # Start a terminal
    $mod+Return exec $term

    # Open a file manager
    ` = grave
    $mod+grave exec $fm

    # Kill focused window
    $mod+Shift+q kill
}
# }}}
# 60-bindings-launchers.conf # {{{
#

bindsym {
    # Start your launcher
    $mod+d exec $menu
    $mod+Space exec $menu
    $mod+Shift+Space exec ~/.config/rofi/launchers/misc/launcher.sh
    #$mod+Shift+Space exec $fm file:/usr/share/applications
}
# }}}
# 60-bindings-tiling-modes.conf # {{{
#

bindsym {
    # Switch the current container between different layout styles
    $mod+s layout stacking
    $mod+w layout tabbed
    $mod+e layout toggle split

    # Make the current focus fullscreen
    $mod+f fullscreen
}
# }}}
# 60-bindings-layout-stuff.conf # {{{
#

bindsym {
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    $mod+b splith
    $mod+v splitv
}
# }}}
# 60-bindings-floating-mode.conf # {{{
#

bindsym {
    # Toggle the current focus between tiling and floating mode
    #bindsym $mod+Shift+space floating toggle
    $mod+Shift+f floating toggle

    # Toggle the current focus between sticky and non-sticky
    $mod+Shift+s sticky toggle 

    # Swap focus between the tiling area and the floating area
    #bindsym $mod+Space focus mode_toggle
    Alt+Space focus mode_toggle
}
# Drag floating windows by holding down $mod and left mouse button.
# Resize them with right mouse button + $mod.
# Despite the name, also works for non-floating windows.
# Change normal to inverse to use left mouse button for resizing and right
# mouse button for dragging.
floating_modifier $mod normal
# }}}
# 60-bindings-workspace.conf # {{{
#

bindsym {
    # Switch to workspace
    $mod+1 workspace number 1
    $mod+2 workspace number 2
    $mod+3 workspace number 3
    $mod+4 workspace number 4
    $mod+5 workspace number 5
    $mod+6 workspace number 6
    $mod+7 workspace number 7
    $mod+8 workspace number 8
    $mod+9 workspace number 9
    $mod+0 workspace number 10
    # Move focused container to workspace
    $mod+Shift+1 move container to workspace number 1
    $mod+Shift+2 move container to workspace number 2
    $mod+Shift+3 move container to workspace number 3
    $mod+Shift+4 move container to workspace number 4
    $mod+Shift+5 move container to workspace number 5
    $mod+Shift+6 move container to workspace number 6
    $mod+Shift+7 move container to workspace number 7
    $mod+Shift+8 move container to workspace number 8
    $mod+Shift+9 move container to workspace number 9
    $mod+Shift+0 move container to workspace number 10
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.
}
# }}}
# 60-bindings-moving-around.conf # {{{
#

bindsym {
    # Move focus to the parent container
    $mod+Shift+a focus parent
    # Move your focus around
    $mod+$left focus left
    $mod+$down focus down
    $mod+$up focus up
    $mod+$right focus right
    # Or use $mod+[up|down|left|right]
    $mod+Left focus left
    $mod+Down focus down
    $mod+Up focus up
    $mod+Right focus right

    # Move the focused window with the same, but add Shift
    $mod+Shift+$left move left
    $mod+Shift+$down move down
    $mod+Shift+$up move up
    $mod+Shift+$right move right
    # Ditto, with arrow keys
    $mod+Shift+Left move left
    $mod+Shift+Down move down
    $mod+Shift+Up move up
    $mod+Shift+Right move right
}
# }}}
# 60-bindings-scratchpad.conf # {{{
#

bindsym {
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    $mod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    $mod+minus scratchpad show
}
# }}}
# 60-bindings-resizing-containers.conf # {{{
#

mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"
# }}}

# Defaults from: /usr/share/sway/config.d/*
# 60-bindings-screenshot.conf is modified
# 60-bindings-brightness.conf # {{{
#
# copied from: /usr/share/sway/config.d/60-bindings-brightness.conf
#
#
# Key bindings for brightness control using `light`.
# Displays a notification with the current value if /usr/bin/notify-send is available
#
# Brightness increase/decrease step can be customized by setting the `$brightness_step`
# variable to a numeric value before including the file.
#
# Requires:     light
# Recommends:   libnotify

set $brightness_notification_cmd  command -v notify-send >/dev/null && \
        VALUE=$(light) && VALUE=${VALUE%%.*} && \
        notify-send -e -h string:x-canonical-private-synchronous:brightness \
            -h "int:value:$VALUE" -t 800 "Brightness: ${VALUE}%"

bindsym XF86MonBrightnessDown exec \
        'STEP="$brightness_step" && light -U ${STEP:-5} && $brightness_notification_cmd'
bindsym XF86MonBrightnessUp exec \
        'STEP="$brightness_step" && light -A ${STEP:-5} && $brightness_notification_cmd'
# }}}
# 60-bindings-media.conf # {{{
#
# copied from: /usr/share/sway/config.d/60-bindings-media.conf
#
#
# Key bindings for media player control via MPRIS D-Bus interface
#
# Requires:     playerctl

# Allow Play and Stop bindings even if the screen is locked
bindsym --locked {
    XF86AudioPlay       exec playerctl play-pause
    XF86AudioStop       exec playerctl stop
}

bindsym {
    XF86AudioForward    exec playerctl position +10
    XF86AudioNext       exec playerctl next
    XF86AudioPause      exec playerctl pause
    XF86AudioPrev       exec playerctl previous
    XF86AudioRewind     exec playerctl position -10
}
# }}}
# 60-bindings-screenshot.conf # {{{
#
# copied from: /usr/share/sway/config.d/60-bindings-screenshot.conf
#
#
# Key bindings for taking screenshots
#
# The image files will be written to XDG_SCREENSHOTS_DIR if this is set
# or defined in user-dirs.dir, or to a fallback location XDG_PICTURES_DIR.
#
# Copy the file to ~/.config/sway/config.d/60-bindings-screenshot.conf (or to
# your $XDG_CONFIG_HOME location if set differently) to be able to overwrite
# existing shortcuts.
# Check 'man grimshot' for additional commands that you may find useful.
#
# Requires:     grimshot

bindsym {
    # Capture the currently active output
    Print                       exec grimshot save output
    $mod+XF86AudioRaiseVolume   exec grimshot save output

    # Capture the currently active window
    Alt+Print                   exec grimshot save active
    $mod+XF86AudioLowerVolume   exec grimshot save active

    # Select and capture a custom rectangular area
    Ctrl+Print                  exec grimshot save area
    $mod+XF86AudioMute          exec grimshot save area
}
# }}}
# 60-bindings-volume.conf # {{{
#
# copied from: /usr/share/sway/config.d/60-bindings-volume.conf
#
#
# Key bindings to control pipewire or pulseaudio volume with pactl.
# Displays a notification with the current state if /usr/bin/notify-send is available
#
# Volume increase/decrease step can be customized by setting the `$volume_step`
# variable to a numeric value before including the file.
# Maximum volume boost level can be set with the `$volume_limit` variable.
#
# Requires:     pulseaudio-utils
# Recommends:   libnotify

set $volume_helper_cmd /usr/libexec/sway/volume-helper

# Allow volume controls even if the screen is locked
bindsym --locked {
    XF86AudioRaiseVolume exec \
        $volume_helper_cmd --limit "$volume_limit" --increase "$volume_step"
    XF86AudioLowerVolume exec \
        $volume_helper_cmd --limit "$volume_limit" --decrease "$volume_step"
    XF86AudioMute    exec pactl set-sink-mute @DEFAULT_SINK@ toggle && $volume_helper_cmd
    XF86AudioMicMute exec pactl set-source-mute @DEFAULT_SOURCE@ toggle
}
# }}}

# Added/Customized by DeaDSouL
# 60-bindings-keyboard-backlight.conf # {{{
#
# 1) You will need to run `visudo` with sudo or as root,
# then add the following line at the very bottom:
#   deadsoul ALL=(ALL)  NOPASSWD: /home/deadsoul/.config/sway/bin/kbbl
#
# Do NOT forget to change 'deadsoul' to your username.
#
# 2) Make sure `kbbl` is executable
#   chmod +x ~/.config/sway/bin/kbbl
#

bindsym {
    # Increase the keyboard backlight
    XF86KbdBrightnessUp         exec sudo ~/.config/sway/bin/kbbl up

    # Decrease the keyboard backlight
    XF86KbdBrightnessDown       exec sudo ~/.config/sway/bin/kbbl down
}
# }}}
# 60-bindings-wallpaper-changer.conf # {{{
#
# You will need to create a virtual python environment, pipenv is the default one
# If you would like to use something else, you may need to modify the `RUNCMD` variable
# in sway/bin/random_bg.sh as well as installing the requirements. Let's assume you're
# fine with `pipenv` as the default. Follow the followings:
#   1) cd sway/bin/
#   2) pipenv install -r requirements-pipenv.txt
#   3) set the location to your wallpaper as the value to
#      the variable: `BGDIR` in sway/bin/random_bg.sh
#   4) cd .. && ./random_bg.sh status
#

bindsym {
    # Select a wallpaper using Rofi
    Alt+2           exec ~/.config/sway/bin/pick-wallpaper.sh

    # Select a wallpaper using imv
    #Alt+Shift+2     exec find -L ~/Pictures/wallpapers | imv -f
    Alt+Shift+2     exec imv -fr ~/Pictures/wallpapers

    # Change the wallpaper to a random one
    $mod+Shift+r    exec ~/.config/sway/bin/random_bg.sh once
}
# }}}
# 60-bindings-bins.conf # {{{
#

bindsym {
    # Inactive windows transparency
    # Enable
    Alt+1           exec ~/.config/sway/bin/inactive-windows-transparency.sh
    # Disable
    Alt+Shift+1     exec killall inactive-windows-transparency.py

    # Browse Youtube from terminal
    $mod+y          exec $term --title='YouTube browser' --working-directory ~/.config/sway/bin --login-shell bash -c 'source $(~/.local/bin/pipenv --venv)/bin/activate; ./yt.sh'

    # Keybindings CheatSheet
    $mod+Shift+Slash exec $term --title 'KeyBindings' less ~/.config/sway/keybindings.txt
}
# }}}

